import asyncio
import datetime
import logging
import os
import random
import time
import urllib3

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, ReplyKeyboardMarkup, ReplyKeyboardRemove)
from aiogram.utils import executor
from outline_vpn.outline_vpn import OutlineVPN

from yoomoney import Client, Quickpay

import config

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(token=config.telegram_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

try:
    outline_client = OutlineVPN(api_url=config.outline_api_url, cert_sha256=config.outline_cert_sha256)
    yoomoney_client = Client(config.yoomoney_token)
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã API: {e}")

class PromoCodeState(StatesGroup):
    waiting_for_code = State()

class SupportState(StatesGroup):
    waiting_for_message = State()
    admin_response = State()

class MailingState(StatesGroup):
    waiting_for_text = State()


def ensure_dirs_exist(): # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    dirs_to_check = [
        'data',
        'data/promocodes',
        'data/promocodes/discounts',
        'data/transaction_logs',
        'data/texts',
        'data/notifications',
        'attachments'
    ]
    for directory in dirs_to_check:
        if not os.path.exists(directory):
            os.makedirs(directory)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def read_file(path, default=""):
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default

def read_file_lines(path):
    content = read_file(path)
    return content.splitlines() if content else []

async def append_to_file(path, content):
    try:
        with open(path, 'a', encoding='utf-8') as f:
            f.write(str(content) + '\n')
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {path}: {e}")

async def get_moscow_time():
    return datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3)))


### –†–ê–ë–û–¢–ê –° OUTLINE VPN ###

async def create_outline_key(user_id: int, gb_limit: int = 0, name_prefix: str = "Paid"):
    try:
        new_key = outline_client.create_key()
        key_name = f"{name_prefix}_{user_id}_{int(time.time())}"
        outline_client.rename_key(new_key.key_id, key_name)

        if gb_limit > 0 and gb_limit < 998:  # 998, 999 - –∫–æ–¥—ã –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞
            bytes_limit = gb_limit * 1024 * 1024 * 1024
            outline_client.add_data_limit(new_key.key_id, bytes_limit)

        await append_to_file(config.KEYS_IDS_FILE, f'{user_id}||{new_key.access_url}||{new_key.key_id}')

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
        months_to_add = 3 if gb_limit == 999 else 1
        moscow_now = await get_moscow_time()
        expiration_date = moscow_now + datetime.timedelta(days=30 * months_to_add)
        await append_to_file(config.USERS_KEYS_EXPIRATIONS_FILE, f'{user_id}||{int(expiration_date.timestamp())}||{new_key.key_id}')

        logger.info(f"–°–æ–∑–¥–∞–Ω –∫–ª—é—á {new_key.key_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –ª–∏–º–∏—Ç–æ–º {gb_limit}GB")
        return new_key.access_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ Outline –¥–ª—è {user_id}: {e}")
        return None


### –†–ê–ë–û–¢–ê –° YOOMONEY ###

async def generate_payment(amount: float, user_id: int, description: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞ Quickpay."""
    label = f"{user_id}_{int(time.time())}_{random.randint(1000, 9999)}"
    quickpay = Quickpay(
        receiver=config.yoomoney_wallet,
        quickpay_form="shop",
        targets=description,
        paymentType="SB",
        sum=amount,
        label=label
    )
    return quickpay

async def check_yoomoney_payment(label: str, expected_amount: float):
    try:
        history = yoomoney_client.operation_history(label=label)
        for operation in history.operations:
            if operation.status == 'success' and float(operation.amount) >= expected_amount:
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ {label} –Ω–∞ —Å—É–º–º—É {operation.amount}")
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ YooMoney –ø–æ {label}: {e}")
    return False


### –¢–ï–ö–°–¢–´ –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ ###

start_text = read_file(config.START_MESSAGE_FILE, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
support_text = read_file(config.SUPPORT_MESSAGE_FILE, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
info_text = read_file(config.INFORMATION_FILE, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ.")
guide_text = read_file(config.GUIDE_FILE, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")

main_menu_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å VPN', callback_data='buy_vpn'),
    InlineKeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info'),
    InlineKeyboardButton('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support'),
    InlineKeyboardButton('üéÅ –ú–æ–∏ –∫–ª—é—á–∏', callback_data='my_keys'),
    InlineKeyboardButton('üî• –ü—Ä–æ–º–æ–∫–æ–¥', callback_data='promo')
)

info_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton('üî• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', callback_data='guide'),
    InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main_menu')
)

back_to_main_kb = InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main_menu'))


### –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô ###

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    users = read_file_lines(config.USERS_FILE)

    if user_id not in users:
        await append_to_file(config.USERS_FILE, user_id)
        
        # –í—ã–¥–∞—á–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞
        free_key_url = await create_outline_key(message.from_user.id, gb_limit=3, name_prefix="FreeTrial")
        if free_key_url:
            moscow_time_str = (await get_moscow_time()).strftime('%Y-%m-%d %H:%M:%S')
            username = message.from_user.username or "N/A"
            await append_to_file(config.USERS_USERNAME_FILE, f'{user_id}|{username}|{moscow_time_str}|{free_key_url}|Free')
            
            welcome_text = (
                f"*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! üëã*\n\n"
                f"üéâ –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞ –º—ã –¥–∞—Ä–∏–º –≤–∞–º *–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ 3 –ì–ë* —Ç—Ä–∞—Ñ–∏–∫–∞:\n\n"
                f"üóùÔ∏è –í–∞—à –∫–ª—é—á:\n`{free_key_url}`\n\n"
                f"–≠—Ç–æ—Ç –∫–ª—é—á –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å. –ö–æ–≥–¥–∞ —Ç—Ä–∞—Ñ–∏–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π.\n\n"
                f"‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ *'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'*."
            )
            await message.answer(welcome_text, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    await message.answer(start_text, reply_markup=main_menu_kb, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(text='back_to_main_menu')
async def cb_back_to_main_menu(call: types.CallbackQuery):
    await call.message.edit_text(start_text, reply_markup=main_menu_kb, parse_mode=ParseMode.MARKDOWN)
    await call.answer()

@dp.callback_query_handler(text='info')
async def cb_info(call: types.CallbackQuery):
    await call.message.edit_text(info_text, reply_markup=info_kb, parse_mode=ParseMode.MARKDOWN)
    await call.answer()

@dp.callback_query_handler(text='guide')
async def cb_guide(call: types.CallbackQuery):
    back_kb = InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='info'))
    await call.message.edit_text(guide_text, reply_markup=back_kb, parse_mode=ParseMode.MARKDOWN)
    await call.answer()



def get_buy_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(f"{gb} –ì–ë - {price}‚ÇΩ", callback_data=f"buy_new_{gb}") for gb, price in config.PRICE_NEW.items() if gb < 998]
    buttons.append(InlineKeyboardButton(f"–ë–µ–∑–ª–∏–º–∏—Ç (1 –º–µ—Å) - {config.PRICE_NEW[998]}‚ÇΩ", callback_data="buy_new_998"))
    buttons.append(InlineKeyboardButton(f"–ë–µ–∑–ª–∏–º–∏—Ç (3 –º–µ—Å) - {config.PRICE_NEW[999]}‚ÇΩ", callback_data="buy_new_999"))
    kb.add(*buttons)
    kb.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main_menu'))
    return kb

@dp.callback_query_handler(text='buy_vpn')
async def cb_buy_vpn(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:", reply_markup=get_buy_keyboard())
    await call.answer()

@dp.callback_query_handler(Text(startswith="buy_new_"))
async def cb_process_new_key_purchase(call: types.CallbackQuery):
    gb_limit = int(call.data.split('_')[2])
    price = config.PRICE_NEW.get(gb_limit)

    if not price:
        await call.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    if gb_limit >= 998:
        tariff_name = f"–ë–µ–∑–ª–∏–º–∏—Ç ({'3 –º–µ—Å.' if gb_limit == 999 else '1 –º–µ—Å.'})"
    else:
        tariff_name = f"{gb_limit} –ì–ë"

    payment_description = f"–ü–æ–∫—É–ø–∫–∞ VPN: {tariff_name}"
    payment = await generate_payment(price, call.from_user.id, payment_description)

    payment_kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=payment.redirected_url),
        InlineKeyboardButton('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data=f"check_payment_:{payment.label}:{price}:{gb_limit}"),
        InlineKeyboardButton('üîô –û—Ç–º–µ–Ω–∞', callback_data='buy_vpn')
    )
    
    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: *{tariff_name}*.\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *{price} ‚ÇΩ*.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.",
        reply_markup=payment_kb,
        parse_mode=ParseMode.MARKDOWN
    )
    await call.answer()

@dp.callback_query_handler(Text(startswith="check_payment_")) # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
async def cb_check_payment(call: types.CallbackQuery):
    try:
        prefix, rest = call.data.split(':', 1)
        rest, gb_limit_str = rest.rsplit(':', 1)
        label, price_str = rest.rsplit(':', 1)
    except ValueError:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å callback_data: {call.data}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return
    price = float(price_str)
    gb_limit = int(gb_limit_str)
    
    await call.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É...", show_alert=False)

    if await check_yoomoney_payment(label, price):
        await call.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–µ–º –≤–∞—à –∫–ª—é—á...", reply_markup=None)
        
        new_key_url = await create_outline_key(call.from_user.id, gb_limit=gb_limit)
        
        if new_key_url:
            await append_to_file(config.TRANSACTION_LOGS_FILE, f"{call.from_user.id}|{price}|{gb_limit}GB|{label}")
            final_text = (
                f"üéâ –í–∞—à –Ω–æ–≤—ã–π VPN-–∫–ª—é—á –≥–æ—Ç–æ–≤!\n\n"
                f"üóùÔ∏è –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:\n`{new_key_url}`\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, –µ—Å–ª–∏ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑."
            )
            await call.message.answer(final_text, reply_markup=back_to_main_kb, parse_mode=ParseMode.MARKDOWN)
            
        else: # –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –∞ –∫–ª—é—á –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
            error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥: `{label}`"
            await call.message.answer(error_text, reply_markup=back_to_main_kb)
            logger.critical(f"–ö–ª—é—á –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è {call.from_user.id} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã {label}")
    else:
        await call.answer("‚ùå –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


@dp.callback_query_handler(text='my_keys') # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–º–æ–∏ –∫–ª—é—á–∏"
async def cb_my_keys(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    user_keys_info = []
    
    all_keys = read_file_lines(config.KEYS_IDS_FILE)
    user_keys_data = [line.split('||') for line in all_keys if line.startswith(user_id)]

    if not user_keys_data:
        await call.message.edit_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.", reply_markup=back_to_main_kb)
        await call.answer()
        return

    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö...")
    
    try:
        outline_keys = outline_client.get_keys()
        outline_keys_dict = {key.key_id: key for key in outline_keys}
        
        response_text = "*–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:*\n\n"
        
        for key_data in user_keys_data:
            _, access_url, key_id = key_data
            
            if key_id in outline_keys_dict:
                key = outline_keys_dict[key_id]
                used_gb = key.used_bytes / (1024**3) if key.used_bytes else 0
                
                if key.data_limit:
                    limit_gb = key.data_limit / (1024**3)
                    response_text += (
                        f"üîπ *–ö–ª—é—á ID: {key.key_id}*\n"
                        f"   - –¢—Ä–∞—Ñ–∏–∫: *{used_gb:.2f} / {limit_gb:.0f} –ì–ë*\n"
                        f"   - –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞: `{access_url}`\n\n"
                    )
                else: # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
                    response_text += (
                        f"üîπ *–ö–ª—é—á ID: {key.key_id} (–ë–µ–∑–ª–∏–º–∏—Ç)*\n"
                        f"   - –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: *{used_gb:.2f} –ì–ë*\n"
                        f"   - –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞: `{access_url}`\n\n"
                    )
        
        await call.message.edit_text(response_text, reply_markup=back_to_main_kb, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π –¥–ª—è {user_id}: {e}")
        await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_to_main_kb)

### –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ###

@dp.callback_query_handler(text='support')
async def cb_support(call: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    await SupportState.waiting_for_message.set()
    cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞")
    await call.message.answer(support_text, reply_markup=cancel_kb, parse_mode=ParseMode.MARKDOWN)
    await call.answer()

@dp.message_handler(state=SupportState.waiting_for_message, content_types=types.ContentTypes.ANY)
async def process_support_message(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if message.text and message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await message.answer(start_text, reply_markup=main_menu_kb, parse_mode=ParseMode.MARKDOWN)
        return
        
    forward_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_answer_{message.from_user.id}")
    )
    await bot.forward_message(config.support_account, message.chat.id, message.message_id)
    await bot.send_message(config.support_account, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id})", reply_markup=forward_kb)
    
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=ReplyKeyboardRemove())
    await state.finish()
        

@dp.callback_query_handler(Text(startswith="admin_answer_"), state="*")
async def cb_admin_answer(call: types.CallbackQuery, state: FSMContext):
    user_id_to_answer = call.data.split('_')[2]
    await SupportState.admin_response.set()
    await state.update_data(user_id=user_id_to_answer) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id_to_answer}")
    await call.answer()

@dp.message_handler(state=SupportState.admin_response)
async def process_admin_response(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')

    if not user_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        return

    try:
        await bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}")
        await message.answer(f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")
    
    await state.finish()


### –ü—Ä–æ–º–æ–∫–æ–¥—ã ###
@dp.callback_query_handler(text='promo')
async def cb_promo(call: types.CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    await PromoCodeState.waiting_for_code.set()
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    await call.answer()

@dp.message_handler(state=PromoCodeState.waiting_for_code) # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
async def process_promo_code(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = str(message.from_user.id)
    user_code = message.text.strip()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
    activation_logs = read_file_lines(config.PROMO_ACTIVATION_LOGS)
    for log in activation_logs:
        if log.startswith(user_id):
            await message.answer("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥.", reply_markup=back_to_main_kb)
            return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    all_promocodes = read_file_lines(config.PROMOCODES_FILE)
    if user_code not in all_promocodes:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", reply_markup=back_to_main_kb)
        return

    # –Ω–∞—Ö–æ–¥–∏–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_keys = read_file_lines(config.KEYS_IDS_FILE)
    user_key_id = None
    for key_line in all_keys:
        if key_line.startswith(user_id):
            user_key_id = key_line.split('||')[2]

    if not user_key_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞.", reply_markup=back_to_main_kb)
        return

    try:
        # –ø–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –∏–∑ —Ñ–∞–π–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
        bonus_gb_str = read_file(os.path.join(config.PROMO_DISCOUNT_DIR, f"{user_code}.txt"))
        if not bonus_gb_str:
             await message.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=back_to_main_kb)
             logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {user_code}")
             return

        bonus_gb = int(bonus_gb_str)
        bonus_bytes = bonus_gb * 1024 * 1024 * 1024

        key_details = outline_client.get_keys(key_id=user_key_id)[0]
        current_limit_bytes = key_details.data_limit if key_details.data_limit else 0
        new_limit_bytes = current_limit_bytes + bonus_bytes

        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
        if outline_client.add_data_limit(user_key_id, new_limit_bytes):
            await append_to_file(config.PROMO_ACTIVATION_LOGS, f"{user_id}||{user_code}")
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{user_code}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ *{bonus_gb} –ì–ë* —Ç—Ä–∞—Ñ–∏–∫–∞.", reply_markup=back_to_main_kb, parse_mode=ParseMode.MARKDOWN)
        else:
            raise Exception("Outline client failed to set new data limit.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {user_code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=back_to_main_kb)

### –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç—á–∏—Å—Ç–∫–∞ ###

async def check_keys_and_notify(): # —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞; –æ –º–∞–ª–æ–º –æ—Å—Ç–∞—Ç–∫–µ —Ç—Ä–∞—Ñ–∏–∫–∞; —É–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∏ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
    await asyncio.sleep(10)
    while True:
        try:
            logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π...")
            current_time_unix = int(time.time())
            all_outline_keys = outline_client.get_keys()
            expirations = read_file_lines(config.USERS_KEYS_EXPIRATIONS_FILE)
            notified_users = read_file_lines(config.NOTIFIED_KEYS_FILE)

            # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            outline_keys_dict = {key.key_id: key for key in all_outline_keys}
            
            new_expirations = []
            keys_to_delete = []

            for line in expirations:
                try:
                    user_id, expiration_unix, key_id = line.split('||')
                    expiration_unix = int(expiration_unix)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                    if key_id not in outline_keys_dict or expiration_unix < current_time_unix:
                        keys_to_delete.append((key_id, user_id, "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫"))
                        continue

                    outline_key = outline_keys_dict[key_id]
                    used_bytes = outline_key.used_bytes if outline_key.used_bytes is not None else 0
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
                    if outline_key.data_limit and used_bytes >= outline_key.data_limit:
                        keys_to_delete.append((key_id, user_id, "–ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω"))
                        continue

                    # –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–¥–∏–Ω —Ä–∞–∑)
                    if key_id not in notified_users:
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—Ä–æ–∫–∞ (–∑–∞ 3 –¥–Ω—è)
                        if expiration_unix - current_time_unix < 259200: # 3 –¥–Ω—è
                             await bot.send_message(user_id, read_file(config.NOTIFY_EXPIRATION_FILE))
                             await append_to_file(config.NOTIFIED_KEYS_FILE, key_id)

                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–ª–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ (–æ—Å—Ç–∞–ª–æ—Å—å < 10%)
                        elif outline_key.data_limit and (outline_key.data_limit - used_bytes) / outline_key.data_limit < 0.1:
                            await bot.send_message(user_id, read_file(config.NOTIFY_LOW_TRAFFIC_FILE))
                            await append_to_file(config.NOTIFIED_KEYS_FILE, key_id)
                    
                    new_expirations.append(line)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –∫–ª—é—á–∞ '{line}': {e}")
                    new_expirations.append(line) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π
            for key_id, user_id, reason in keys_to_delete:
                try:
                    outline_client.delete_key(key_id)
                    await bot.send_message(user_id, f"–í–∞—à –∫–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ {reason}. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                    logger.info(f"–£–¥–∞–ª–µ–Ω –∫–ª—é—á {key_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason}.")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á {key_id}: {e}")
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            with open(config.USERS_KEYS_EXPIRATIONS_FILE, 'w', encoding='utf-8') as f:
                f.write('\n'.join(new_expirations) + '\n')

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ `check_keys_and_notify`: {e}")

        await asyncio.sleep(3600)

async def on_startup(dp: Dispatcher):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    ensure_dirs_exist()
    asyncio.create_task(check_keys_and_notify())
    logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π –∑–∞–ø—É—â–µ–Ω–∞.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)